# 無効にするルール
disabled_rules:
#  - class_delegate_protocol # Delegateなprotocolはclass-onlyであるべき
#  - closing_brace # })など括弧が続く場合に間にスペースはないこと
#  - closure_parameter_position # クロージャの引数リストはクロージャの始まり{と同じ行にあるべき
#  - closure_spacing #
#  - colon # :は変数名の直後に書き、型名はその後に1スペース空けて書くべき & DictionaryではKeyの直後に:を書き、Valueはその後に1スペース空けて書くべき
#  - comma # ,の前にはスペースを入れず、,の後には1つスペースを入れる
#  - compiler_protocol_init # リテラルを直接書き並べて初期化するタイプのinitializerは直接呼び出してはいけない
#  - control_statement # ifなどの制御分の条件式は()で囲まないこと
#  - cyclomatic_complexity # 関数内の複雑度（ネストや条件文）は程々に（11以上で警告、21以上でエラー）
#  - discarded_notification_center_obserer # NotificationCenter.addObserver(forName:object:queue:using:)で追加されたobserverは後で除去できるように変数に入れること
#  - dynamic_inline # @inline指定とdynamicを同時に使ってはいけない
#  - empty_parentheses_with_trailing_closure # 末尾クロージャを使用するときはメソッド名の後に引数のない空の()は書かないこと
#  - file_length # 1ファイルは長くなりすぎないこと（401行以上で警告、1001行以上でエラー）
#  - force_cast # 強制キャスト(as!)は使ってはいけない
#  - force_try # 強制try(try!)は使ってはいけない
#  - generic_type_name # ジェネリクスの型名は英大文字で始まる1〜20文字であるべき
#  - implicit_getter # read-onlyなcomputed-propertyにはgetを書かないこと
  - large_tuple # タプルのメンバーは２つまで
#  - leading_whitespace # ファイルの先頭に空行を置かないこと
  - line_length # 1行は120文字まで
#  - mark # MARKコメントは正しく書くべき
  - nesting # 型のネストは深くても1レベルの深さまで、その他の文は深くても5レベルの深さまで
#  - notification_center_detachment # NSNotificationCenterに登録したobserverはクラスのdeinitで除去するべき
#  - opening_brace # 関数等の開き{は直前に1つのスペースを置いて、宣言と同じ行に書くべき
#  - operator_whitespace # 演算子を定義する場合は演算子の前後に1つスペースを置くべき
#  - private_unit_test # privateなテストケースメソッドは書かないこと
#  - redundant_discardable_let # 関数の返り値を捨てる場合はletは不要
#  - redundant_optional_initialization # オプショナル変数の初期化時にnilを入れるのは冗長なので書かないこと
#  - redundant_string_enum_value # String型のenumの各caseの値をcase名と同じにする際は，その処理は省略できるので書かないこと
#  - redundant_void_return　# 関数の宣言時に戻り値がない場合に`-> Void`は書かずに省略するべき
#  - return_arrow_whitespace # 関数の返り値の`->`は前後に1つスペースを入れるべき
#  - shorthand_operator # 複合代入演算子を使うこと
#  - syntactic_sugar # 糖衣構文を使うべき（`Array<Int>()`ではなく`[Int]()`など）
#  - todo # TODOおよびFIXMEコメントは避けるべき
#  - trailing_comma # 末尾の,は禁止
#  - trailing_newline # ファイル末尾の空行は１つだけにするべき
#  - trailing_semicolon # 行末の;は禁止
#  - trailing_whitespace # 行末の空白は禁止
#  - type_body_length # 1クラスの行数は200行まで
#  - type_name # クラス名は3文字〜40文字であるべき
#  - unused_closure_parameter　# クロージャの引数で使用されないものは`_`で置き換えること
#  - unused_enumerated　# for文でindexも要素も使われないときは`.enumerated()`の記述は除去できるので除去すること
#  - unused_optional_binding　# `let _ `=によるOptional Bindingよりは`!= nil`でOptional判定したほうが良い
#  - valid_ibinspectable # @IBInspectable属性はサポートされた型を明示的に持っている変数にのみ使用すること
#  - vertical_parameter_alignment # 引数を複数行に別けて書く場合はインデントを揃えること
#  - vertical_whitespace # 空行を続けて2行以上書かないこと
  - void_return # クロージャなどの型の宣言で、戻り値がない場合は`-> ()`を使わずに`-> Void`を使うこと
#  - weak_delegate # delegateは弱参照にすること

# デフォルト無効のルールのうち、有効にするルール
opt_in_rules:
  - attributes  # 関数や型に対するAttributeは直前の行に独立してあるべき
#  - closure_end_indentation # クロージャの閉じ}はクロージャが始まった行と同じインデントであるべき
  - closure_spacing # クロージャ内の式はカッコの間に1つのスペースがあるべき
#  - conditional_returns_on_newline # 条件文は始まった行の次の行でreturnするべき
  - empty_count # 要素が空であることを確認する際は`count == 0`よりも`isEmpty`を使うべき
  - explicit_init # 明示的な.init()メソッドの呼び出しは避けるべき
#  - explicit_top_level_acl
#  - explicit_type_interface
  - fatal_error_message # fatalErrorを使う場合はメッセージをちゃんと書くべき
#  - file_header # 各ファイルは一貫性のあるヘッダコメントを持つべき．
  - force_unwrapping # 強制アンラップは避けるべき
#  - first_where # .filter { }.firstよりも.first(where:)を使用するべき
#  - implicit_return
  - implicitly_unwrapped_optional # 暗黙的なUnwrapはNGにするべき、ただし例外的にIBOutletはOK
#  - nimble_operator # Nimbleの使用にあたり，free matcher functionsよりもオーバロードされた演算子を用いる
#  - no_extension_access_modifier #
#  - number_separator # 大きな数値を書く際はセパレータ(1_000_000 みたいな)を書くべき
#  - object_literal # 画像や色の指定はオブジェクトリテラル(#imageLiteralや#colorLiteral)を使用するべき
  - operator_usage_whitespace # 演算子を使用する際は前後に1つスペースを入れるべき
#  - overridden_super_call # overrideされたメソッドは常にsuperを呼び出すべき
  - private_outlet # @IBOutlet変数はprivate修飾するべき
  - prohibited_super_call # 特定のメソッドではsuperを呼んではいけない(UIViewController.loadViewなど)
  - redundant_nil_coalescing # ??の右側にnilは書かない
# - sorted_imports # import文はソートしておくこと
  - switch_case_on_newline # switch文におけるcaseの各処理は改行した後書くべき

# elseやcatch等の位置
statement_position:
  statement_mode: default # `} else {` のように前の}に続けて書く
  # statement_mode: uncuddled_else # }の後に改行を入れる

# 変数名が2文字以上なら許可
identifier_name:
  min_length: 2
  excluded:
    - x
    - y 

# Lint対象外のファイル
excluded:
  - Carthage
  - Pods
